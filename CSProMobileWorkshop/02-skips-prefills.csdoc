<title>Session 02: Skips and Prefills</title>

At the end of this session participants will be able to:
<list>
    <li>Use the commands <logiccolor>skip</logiccolor> and <logiccolor>ask if</logiccolor> to skip fields</li>
    <li>Use <logiccolor>if then else</logiccolor> statements to implement skip patterns</li>
    <li>End rosters from logic using <logiccolor>endgroup</logiccolor></li>
    <li>Automatically fill in fields using logic</li>
</list>

<subheader>Skips</subheader>
In question <b>F04</b> (other housing units), we need to skip over question <b>F05</b> (numbers of housing units) if they answer "no".

To skip to a field, we need to use logic. To add logic to a CSPro application click on the logic button <image logic.png /> on the toolbar to switch to the logic view. Here we can type in CSPro logic to control the program. Logic is added to a PROC (procedure) usually associated with a field on the form. To go to the PROC for a field in the logic view, just click on the field in the form tree on the left while in logic view. We will add our skip to the PROC of field <b>OTHER_HOUSING_UNITS</b> so click on <b>OTHER_HOUSING_UNITS</b> in the form tree.

To skip to a field, we use the command <logiccolor>skip</logiccolor>. In order to skip only when the answer is no, we need to combine the skip with an <logiccolor>if</logiccolor> statement as follows:

<logic>
PROC OTHER_HOUSING_UNITS

if OTHER_HOUSING_UNITS = 2 then
    skip to TENURE;
endif
</logic>

The <logiccolor>if</logiccolor> statement only executes the code between the <logiccolor>then</logiccolor> and the <logiccolor>endif</logiccolor> if the condition (<logiccolor>OTHER_HOUSING_UNITS = 2</logiccolor>) is true, otherwise it goes straight to the first command after the <logiccolor>endif</logiccolor>.

This will skip directly to TENURE for individuals who answer "no" to OTHER_HOUSING_UNITS, skipping over the HOUSING_UNITS roster.

In addition to "=" to check if two values are equal, you can use the following operators:

<indent><table 2>
    <cell><b>Operation</b></cell><cell><b>Symbol</b></cell>
    <cell>Equal to</cell><cell>=</cell>
    <cell>Not equal to</cell><cell>&lt;&gt;</cell>
    <cell>Less than</cell><cell>&lt;</cell>
    <cell>Less than or equal to</cell><cell>&lt;=</cell>
    <cell>Greater than</cell><cell>&gt;</cell>
    <cell>Greater than or equal to</cell><cell>&gt;=</cell>
</table></indent>

For example, to skip over <b>B08</b>, residence one year ago, for those less than one year of age we could add the following logic to the PROC of the preceding question:

<logic>
PROC PLACE_OF_BIRTH
if AGE < 1 then
    skip to MOTHER_ALIVE;
endif;
</logic>

Note that once we have skipped the field <b>RESIDENCE_ONE_YEAR_AGO</b>, we can't get to it by clicking on it or going back from the following field. CSEntry keeps track of the fact that this field was skipped and won't let us back in until we change the value of <b>AGE</b>. This is an important difference between system controlled and operator controlled data entry mode.

We should add a comment to other readers of our logic so that they will understand what we are trying to do. This will not only help others understand our logic but it will help us when come back to it after a few months.

<logic>PROC PLACE_OF_BIRTH
// Do not ask residence one year ago for those less than one year old
if AGE < 1 then
    skip to MOTHER_ALIVE;
endif</logic>

Everything on a line after <logiccolor>//</logiccolor> is considered a comment and is ignored by CSPro. You can also use <logiccolor>/* */</logiccolor> for multiline comments. It is good practice to use plenty of comments to document your logic.

<callout><center><b>A note on coding style</b></center>
When writing if statements, your code will be more readable and easier for others to understand if you indent the statements between the then and the endif. It is also helpful to use consistent capitalization. We recommend all uppercase for dictionary variables like <b>NUMBER_OF_HOUSEHOLD_MEMBERS</b> and all lowercase for CSPro keywords like <logiccolor>if</logiccolor>, <logiccolor>then</logiccolor> and <logiccolor>endif</logiccolor>. Finally, you should use comments as much as possible to help others, and your future self, better understand your code.
</callout>

<subheader>Ask if</subheader>
An alternative to the skip is the statement <logiccolor>ask if</logiccolor>. It skips the current question if the condition is NOT met. For example, to use <logiccolor>ask if</logiccolor><logiccolor></logiccolor> in order to only ask the question <b>RESIDENCE_ONE_YEAR_AGO</b> (<b>B08</b>) for those aged 1 and over we can use the following logic:

<logic>PROC RESIDENCE_ONE_YEAR_AGO
preproc
ask if AGE >= 1
</logic>

The <logiccolor>ask if</logiccolor> statement skips over the question unless the condition <logiccolor>AGE &gt;= 1</logiccolor> is true. In other words, if the age is less than 1, the question will be skipped. Note that when changing from <logiccolor>skip</logiccolor> to <logiccolor>ask if</logiccolor>, the condition was negated by switching from "&lt;" to "&gt;=".

The line <logiccolor>preproc</logiccolor> tells CSPro to execute this logic <i>before</i> asking the question. Our previous examples did not specify <logiccolor>preproc</logiccolor>, so by default the logic was executed in the <logiccolor>postproc</logiccolor>. Postproc logic is executed <i>after</i> the data are entered. Preproc logic is executed before the data are entered. For each variable, you can specify a preproc, a postproc or both. The <logiccolor>ask if</logiccolor> statement will always be used in the <logiccolor>preproc</logiccolor> of the field being skipped while <logiccolor>skip</logiccolor> can either be in the preproc of the field being skipped or in the postproc of the preceding field.

<callout><center><b>Group exercise</b></center>
Implement the skip pattern for questions <b>F10</b> (has a toilet) and <b>F11</b> (type of toilet). If the answer to question F10, have toilet, is "no", skip question <b>F11</b>, type of toilet. You can use either <logiccolor>skip</logiccolor> or <logiccolor>ask if</logiccolor>. Make sure to add a comment to your code and to format your code using correct indentation and capitalization.
</callout>

<subheader>Compound Conditions</subheader>
As another example, we will implement the skip pattern for question <b>C01</b>. We need to skip over <b>C02</b>, highest level of education, if school attendance is "never attended" (1) or "don't know" (9). We can implement this with two if statements:
<pagebreak />
<logic>PROC ATTENDED_SCHOOL

// Skip over highest level education for those who never attended school
if ATTENDED_SCHOOL = 1 then
    skip to LITERATE;
endif;

// Skip over highest level education for those whose attendance is "don't know"
if ATTENDED_SCHOOL = 9 then
    skip to LITERATE;
endif;
</logic>
~!~
Note that in CSPro, logic statements must be separated by semicolons (;). This tells CSPro when one command ends and the next begins. Forgetting to put the semicolon at the end of a statement is a very common error that new users make. If you forget the semicolon, usually CSPro will tell you that that a semicolon was expected, although sometimes it gets confused and gives you a less informative error message.

We can simplify this code by combining the two if statements using the "or" operator to create a compound condition.

<logic>PROC ATTENDED_SCHOOL

// Skip over highest level education for those whose attendance is "never attended"
// or "don't know"
if ATTENDED_SCHOOL = 1 or ATTENDED_SCHOOL = 9 then
    skip to LITERATE;
endif;</logic>

In addition to the "or" operator you can also make compound conditions using the "and" operator. A compound statement linked by "or" is true if either one of the conditions are true but a compound statement using "and" is only true if both conditions are true.

In addition to "or", CSPro supports the following logical operators:

<table 2>
    <cell><b>Operation</b></cell><cell><b>Keyword</b></cell>
    <cell>Negate an expression</cell><cell>not</cell>
    <cell>True if both expressions are true</cell><cell>and</cell>
    <cell>True if either expression is true</cell><cell>or</cell>
</table>

You can also use compound conditions with <logiccolor>ask if</logiccolor>. For example we only want to ask question <b>B14</b>, age at first marriage, for those who responded "married" or "widowed" or "divorced" for marital status.
~!~

<logic>PROC AGE_AT_FIRST_MARRIAGE
preproc
// Only ask age at first marriage for those whose marital status indicates
// they are/were married
ask if MARITAL_STATUS = 2 or MARITAL_STATUS = 3 or MARITAL_STATUS = 4;
</logic>

An "or" expression is true when either the left or right expressions are true so the question will only be asked if the MARITAL_STATUS is either 2, 3 or 4.

We can make our expression even simpler using the "in" operator which checks if a value is in a range:

<logic>PROC AGE_AT_FIRST_MARRIAGE
preproc
// Only ask age at first marriage for those whose marital status indicates
// they are/were married
ask if MARITAL_STATUS in 2:4;
</logic>

<subheader>Other (specify) fields</subheader>
A common pattern in CSPro is to use the <logiccolor>ask if</logiccolor> statement to implement other (specify) fields. Let's implement the other (specify) field for question <b>F08</b>, roofing material. First we add a new alpha field to the dictionary to capture the "other" value. We can call it <b>ROOFING_MATERIAL_OTHER</b> and drop it onto the form so that it comes right after <b>ROOFING_MATERIAL</b>. We only want to ask for the "other" value if they selected "other" (code 5) for ROOFING_MATERIAL, otherwise we want to skip it. We can do that using ask if in the preproc for ROOFING_MATERIAL_OTHER.

<logic>PROC ROOFING_MATERIAL_OTHER
preproc

// ask this question only if "Other (specify)" is picked in roofing material.
ask if ROOFING_MATERIAL = 5;
</logic>

<subheader>Skip to next</subheader>
Now let's add the skip between sign language (<b>B12</b>) and marital status (<b>B13</b>) to skip to the next person for household members under 10 years old. In this case, what do we skip to? We can't skip to <b>B01</b> (line number) since that will try to send us backwards to the line number for the current row. Instead, we use <logiccolor>skip to next</logiccolor> which automatically skips to the first field in the next row of the roster. We will put this skip in the postproc of <b>SIGN_LANGUAGE</b>.

<logic>PROC SIGN_LANGUAGE
// Skip to next person for household members under 10 years of age
if AGE < 10 then
    skip to next;
endif;
</logic>

Let's add the skip in section C, education, for those under 3 years of age. We are only supposed to fill in the education section for those aged three years and above. We can use <logiccolor>skip to next</logiccolor> to skip over the education questions if the age is less than three. We need to do this in the preproc of <b>C01</b>, the first field in the education roster, <b>ATTENDED_SCHOOL</b>.

Note that since this field already has a <logiccolor>postproc</logiccolor> we need to add the <logiccolor>preproc</logiccolor> first and then add the word <logiccolor>"postproc"</logiccolor> so that the original <logiccolor>postproc</logiccolor> logic does not become part of the <logiccolor>preproc</logiccolor>.

<logic>
PROC ATTENDED_SCHOOL
preproc

// Skip education for household members under 3 years of age
if AGE < 3 then
    skip to next;
endif;

postproc
// Skip highest grade if never attended or don't know
if ATTENDED_SCHOOL = 1 or ATTENDED_SCHOOL = 9 then
    skip to LITERATE;
endif;
</logic>

<subheader>Prefills</subheader>
Let's fill in the line number automatically so that the interviewer doesn't have to enter it. We can do this in the preproc of <b>PERSON_NUMBER</b>:

<logic>
PROC PERSON_NUMBER
preproc

// Fill in line number automatically
PERSON_NUMBER = curocc();
</logic>

The CSPro function <logiccolor>curocc()</logiccolor> gives us the current occurrence number of a repeating record or item. In other words, it gives the row number of the roster we are currently on.

To avoid having to hit enter to move through this field we can use the statement <logiccolor>noinput</logiccolor> which accepts the assigned answer and automatically moves to the next field as if the interviewer had used the enter key.

<logic>PROC PERSON_NUMBER
preproc

// Fill in line number automatically
PERSON_NUMBER = curocc();
noinput;
</logic>

Alternatively, we can make the field uneditable by checking the protected box in the field properties. With <logiccolor>noinput</logiccolor> it is still possible to go back and modify the field, but protected fields cannot be modified except from logic. Be aware that if you do not set the value of a protected field in logic <i>before</i> the interviewer gets to the field, CSEntry will give you a fatal error.

<callout><center><b>Group Exercise</b></center>
In question <b>B10</b>, mother line number, automatically fill in the code 88 (deceased) if the response to <b>B09</b>, mother alive, is "no". You may be tempted to use the skip statement for this but you should use the noinput statement instead.
</callout>

<subheader>Endgroup</subheader>
Instead of using the occurrence control field in the roster, we could ask the user if they want to terminate the roster. To do that, we first add a new field to the dictionary and it to the roster. Let's call it <b>MORE_PEOPLE</b> and give it the value set Yes - 1, No – 2. We will put it at the end of the names roster. If the interviewer picks "no" then we use the command <logiccolor>endgroup</logiccolor> which terminates entry of the current roster or repeating form.

<logic>
PROC MORE_PEOPLE

// Exit roster when no more people in household
if MORE_PEOPLE = 2 then
    endgroup;
endif;
</logic>

With this, we no longer need to use the occurrence control field of the roster. However, since the other rosters (demographics and education) still rely on the variable <b>NUMBER_OF_HOUSEHOLD_MEMBERS</b> as a roster control field we need to set its value after completing the names roster. We can make it a protected field, move it after the names roster and set it using logic:

<logic>
PROC NUMBER_OF_HOUSEHOLD_MEMBERS
preproc
// Set number of household members to size of person roster.
// It is used as roster occurrence control field for later rosters.
NUMBER_OF_HOUSEHOLD_MEMBERS = totocc(HOUSEHOLD_MEMBERS_ROSTER);
</logic>

This uses the function <logiccolor>totocc()</logiccolor> which gives the total occurrences of a repeating record or item. In other words, it gives us the total number of rows of a roster.

<subheader>Endlevel</subheader>
There is also the <logiccolor>endlevel</logiccolor> command which is similar to endgroup but skips the rest of the current questionnaire (except for two level applications when in a second level node where it terminates the current node).
<pagebreak />
<subheader>Skipping Based on Checkboxes</subheader>
We only want to ask question <b>B12</b>, sign language, if the household member is hearing disabled. We want to skip question <b>B12</b> if hearing disabled is not checked in question <b>B11</b>. How can we tell in logic if hearing disabled is checked? Hearing disabled is option B in the value set so we need to determine if the set of all checked options contains the letter B.

In CSPro logic we can use the function <logiccolor>ischecked()</logiccolor> which returns true if a value is one of the selected values in a checkbox variable. Using <logiccolor>ischecked()</logiccolor> the logic for skipping sign language if hearing is not checked is:

<logic>
PROC SIGN_LANGUAGE

preproc
//ask this question only if hearing disabled (option B) is checked
ask if ischecked("B", DISABILITIES);
</logic>

Note that since we are adding a preproc to a variable that already has a postproc we need to explicitly add the <logiccolor>postproc</logiccolor>.

<logic>
PROC SIGN_LANGUAGE

preproc
//ask this question only if hearing disabled (option B) is checked
ask if ischecked("B", DISABILITIES);

postproc
// Skip to next person for household members under 10 years of age
if AGE < 10 then
    skip to next;
endif;
</logic>

While this works, it creates a problem with the <logiccolor>skip to next</logiccolor> in the postproc. If we enter an individual with age less than 10 who has no difficulty hearing we no longer skip the marital status question. This is because the <logiccolor>ask if</logiccolor> in the preproc skips over the variable and the postproc is not run. Where can we put the <logiccolor>skip to next</logiccolor> so that it will work for those who have no difficulty hearing? We can move it to the preproc of <b>MARITAL_STATUS</b>.

<logic>PROC MARITAL_STATUS
preproc
// Skip to next person for household members under 10 years of age
if AGE < 10 then
    skip to next;
endif;
</logic>
<pagebreak />

<subheader>Exercises</subheader>
<list ordered>
    <li>Skip question <b>F07</b>, monthly rent, if dwelling is not rented in <b>F06</b>.</li>
    <li>In section E, deaths, implement the skip pattern for question <b>E01</b>, any deaths.</li>
    <li>In section E, deaths, implement the skip pattern for question <b>E08</b>, mother of deceased, based on the age at time of death <b>E07</b>.</li>
    <li>In section E, deaths, implement the skip pattern for question <b>E09</b>, died while pregnant.</li>
    <li>In section E, deaths, skip questions <b>E09</b> and <b>E10</b> for deceased household members who are NOT women aged 12-50.</li>
    <li>In section E, use logic to pre-fill the line number field <b>E03</b>. Make sure that the line number is protected.</li>
    <li>Skip all of section C for persons under 3 years of age.</li>
    <li>Add an additional question to <b>F13</b> to determine if the respondent wants to give the distance to water in minutes or kilometers. If they choose kilometers then skip the distance in minutes question otherwise skip the distance in km question.</li>
    <li>Add the other(specify) field and skip pattern for <b>F08</b>, wall material.</li>
    <li>Add the other(specify) field for <b>B15</b>, languages spoken.</li>
    <li>Automatically fill in the  the possession code in question <b>G01</b>.</li>
    <li>In question <b>G01</b>, household possessions, skip the value field if the quantity is zero.</li>
    <li>Add variables and a form for section D: Fertility. Add the variables to the person record but create a new form with its own roster just like we did for section C. Don't worry about the last question on the form that displays the total births. We will cover that in a later lesson. Add the skip patterns for the fertility section. Don't forget to skip the entire section for males and females NOT between 12 and 50 years old.</li>
</list>

<pagebreak />
